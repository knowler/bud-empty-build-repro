import React from 'react'
import useStdoutDimensions from 'ink-use-stdout-dimensions'
import {defaultTheme} from '../themes/index'
/**
 * Use style.
 */
export const useStyle = (initialData = defaultTheme) => {
  /**
   * Theme values
   */
  const [theme, setTheme] = React.useState(initialData)
  /**
   * Width and height of terminal viewport.
   */
  const [width, height] = useStdoutDimensions()
  /**
   * Active screen size
   */
  const [screen, setScreen] = React.useState()
  /**
   * Width of one column.
   */
  const [unit, setUnit] = React.useState(null)
  /**
   * Width and height of application.
   */
  const [bounds, setBounds] = React.useState({
    width,
    height,
  })
  /**
   * Set application based on viewport size.
   */
  React.useEffect(() => {
    setBounds({
      width: width > theme.maxWidth ? theme.maxWidth : width,
      height:
        height > theme.maxHeight ? theme.maxHeight : height,
    })
  }, [width, height])
  /**
   * Set unit to be the total application width available
   * divided by the column count
   */
  React.useEffect(() => {
    setUnit(bounds.width / theme.columns)
  }, [bounds])
  /**
   * Determine which screen size is currently active.
   */
  React.useEffect(() => {
    theme.screens.forEach(([lower, upper], iteration) => {
      bounds.width > lower &&
        bounds.width < upper &&
        setScreen(iteration)
    })
  }, [bounds, theme])
  /**
   * Col
   * Function that returns the width for x columns
   */
  const col = count => {
    return unit * count
  }
  /**
   * Ctx
   *
   * Function that takes an array of possible display values
   * and returns the one that matches the current screen size.
   */
  const ctx = screens => {
    var _a
    const value =
      (_a = screens[screen]) !== null && _a !== void 0
        ? _a
        : screens[screens.length - 1]
    return typeof value == 'number' ? Math.floor(value) : value
  }
  /**
   * Set colors
   *
   * Merges colors onto theme.
   */
  const setColors = colors => {
    setTheme(
      Object.assign(Object.assign({}, theme), {
        colors: Object.assign(
          Object.assign({}, theme.colors),
          colors,
        ),
      }),
    )
  }
  /**
   * Set screens
   *
   * Merges colors onto theme.
   */
  const setScreens = screens => {
    setTheme(
      Object.assign(Object.assign({}, theme), {
        screens: [...theme.screens, ...screens],
      }),
    )
  }
  return Object.assign(
    Object.assign({col, bounds, screen}, theme),
    {setColors, setScreens, ctx},
  )
}
//# sourceMappingURL=index.js.map
