/// <reference types="signale" />
import { Container } from '@roots/container';
import { Framework } from '../Framework';
declare abstract class Bootstrapper extends Container {
    /**
     * Loose
     */
    [key: string]: any;
    /**
     * Bootstrap
     */
    bootstrap?(app: Framework): any;
    /**
     * Bootstrapped
     */
    bootstrapped?(app: Framework): any;
    /**
     * Register
     */
    register?(app: Framework): any;
    /**
     * Post registered callback
     */
    registered?(app: Framework): any;
    /**
     * Boot
     */
    boot?(ap: Framework): any;
    /**
     * Post boot callback
     */
    booted?(app: Framework): any;
}
declare abstract class Service extends Bootstrapper {
    [key: string]: any;
    name: string;
    private _app;
    get app(): Framework;
    constructor(app: Framework['get']);
    get access(): Framework['access'];
    get logger(): import("signale").Signale<import("signale").DefaultMethods>;
    get log(): import("signale").LoggerFunc;
    get info(): import("signale").LoggerFunc;
    get warn(): import("signale").LoggerFunc;
    get error(): import("signale").LoggerFunc;
    get debug(): import("signale").LoggerFunc;
    filterUnique(value: any, index: any, self: any): boolean;
    service<T = any>(serviceName: string | number): T;
}
export { Bootstrapper, Service };
//# sourceMappingURL=index.d.ts.map