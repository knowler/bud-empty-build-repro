/// <reference types="signale" />
import { Framework } from '../Framework';
import { Hooks } from '../Hooks';
import { Module } from './Module';
declare type Key = `${keyof Framework.Extensions & string}`;
declare abstract class Base {
    protected _module: Module;
    protected _app: Framework['get'];
    constructor(app: Framework, extension: Module);
    makeKey(key: Key): Hooks.Name;
    get(key: Key): any;
    set(key: Key, value: any): void;
    get module(): Module;
    get app(): Framework;
    get logger(): import("signale").Signale<import("signale").DefaultMethods>;
    get name(): keyof Framework.Extensions;
    get options(): Module['options'];
    set options(options: Module['options']);
    get when(): Module['when'];
    set when(when: Module['when']);
    get make(): Module.Make;
    set make(make: Module.Make);
}
export default Base;
//# sourceMappingURL=Base.d.ts.map