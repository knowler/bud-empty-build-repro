import {__decorate} from 'tslib'
import {Container} from '@roots/container'
import {boundMethod as bind} from 'autobind-decorator'
class Bootstrapper extends Container {}
class Service extends Bootstrapper {
  constructor(app) {
    super()
    this._app = app
  }
  get app() {
    return this._app()
  }
  get access() {
    return this.app.access
  }
  get logger() {
    return this.app.logger.instance.scope(this.name)
  }
  get log() {
    return this.logger.log
  }
  get info() {
    return this.logger.info
  }
  get warn() {
    return this.logger.warn
  }
  get error() {
    return this.logger.error
  }
  get debug() {
    return this.logger.debug
  }
  filterUnique(value, index, self) {
    return self.indexOf(value) === index
  }
  service(serviceName) {
    return this.app.services.get(serviceName)
  }
}
__decorate([bind], Service.prototype, 'filterUnique', null)
__decorate([bind], Service.prototype, 'service', null)
export {Bootstrapper, Service}
//# sourceMappingURL=index.js.map
