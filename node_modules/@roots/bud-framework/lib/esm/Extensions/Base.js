import {__decorate} from 'tslib'
import _ from 'lodash'
import {boundMethod as bind} from 'autobind-decorator'
class Base {
  constructor(app, extension) {
    this._app = app.get
    this._module = extension
    this.logger
      .scope(this.module.name)
      .success('Extension instantiated')
  }
  makeKey(key) {
    return `extension/${String(this.name)}/${key}`
  }
  get(key) {
    const hook = this.makeKey(key)
    const value = this.app.hooks.filter(hook)
    return value
  }
  set(key, value) {
    this.app.hooks.on(this.makeKey(key), value)
  }
  get module() {
    return this.app.access(this._module)
  }
  get app() {
    return this._app()
  }
  get logger() {
    return this.app.extensions.logger
  }
  get name() {
    return this.module.name
  }
  get options() {
    this.logger.log('get options', this)
    return this.app.access(this.get('options'))
  }
  set options(options) {
    this.set('options', options)
  }
  get when() {
    if (_.isFunction(this.get('when'))) {
      return this.get('when')(
        this.app,
        this.app.container(this.options),
      )
    }
    return this.get('when')
  }
  set when(when) {
    this.set('when', when)
  }
  get make() {
    if (this.when == false) {
      this.logger.debug({
        message: `not set for inclusion. skipping.`,
      })
      return
    }
    if (!this.get('make')) {
      return
    }
    if (_.isFunction(this.get('make'))) {
      return this.get('make')(
        this.options
          ? this.app.container(this.options)
          : this.app.container({}),
        this.app,
      )
    }
    return this.get('make')
  }
  set make(make) {
    this.set('make', make)
  }
}
__decorate([bind], Base.prototype, 'makeKey', null)
__decorate([bind], Base.prototype, 'get', null)
__decorate([bind], Base.prototype, 'set', null)
export default Base
//# sourceMappingURL=Base.js.map
