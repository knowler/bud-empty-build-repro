'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.manifest = exports.log = exports.debug = exports.ci = exports.cache = exports.string = exports.help = exports.boolean = void 0
const command_1 = require('@oclif/command')
const parseAsKeyed = key => {
  return function (input, ctx) {
    return {input}
  }
}
const defaultKeyed = (key, value) => {
  return ctx => ({[key]: value})
}
exports.boolean = command_1.flags.boolean
exports.help = command_1.flags.help
exports.string = command_1.flags.string
/**
 * --cache
 */
exports.cache = command_1.flags.build({
  name: 'cache',
  description: 'Utilize webpack cache',
  hidden: false,
  required: false,
  dependsOn: [],
  exclusive: [],
  env: 'APP_BUILD_CACHE',
  default: defaultKeyed('cache', true),
  parse: parseAsKeyed('cache'),
})
/**
 * --ci
 */
exports.ci = command_1.flags.build({
  name: 'ci',
  description: 'Run in continuous integration mode',
  hidden: false,
  required: false,
  dependsOn: [],
  exclusive: [],
  env: 'APP_BUILD_CI',
  default: defaultKeyed('ci', false),
  parse: parseAsKeyed('ci'),
})
/**
 * --debug
 */
exports.debug = command_1.flags.build({
  name: 'debug',
  description: 'Run in debug mode',
  hidden: false,
  required: false,
  dependsOn: [],
  exclusive: [],
  env: 'APP_BUILD_DEBUG',
  default: defaultKeyed('debug', false),
  parse: parseAsKeyed('debug'),
})
/**
 * --log
 */
exports.log = command_1.flags.build({
  name: 'log',
  description: 'Log results',
  hidden: false,
  required: false,
  dependsOn: [],
  exclusive: [],
  env: 'APP_BUILD_LOG',
  default: defaultKeyed('log', false),
  parse: parseAsKeyed('log'),
})
/**
 * --log
 */
exports.manifest = command_1.flags.build({
  name: 'manifest',
  description: 'Generate a manifest',
  hidden: false,
  required: false,
  dependsOn: [],
  exclusive: [],
  env: 'APP_BUILD_MANIFEST',
  default: defaultKeyed('manifest', true),
  parse: parseAsKeyed('manifest'),
})
/**
 *
 * {
    help: flags.help({char: 'h'}),
    cache: flags.boolean(),
    ci: flags.boolean(),
    debug: flags.boolean(),
    log: flags.boolean(),
    hash: flags.boolean(),
    install: flags.boolean(),
    'locations.project': flags.string(),
    'locations.src': flags.string(),
    'locations.dist': flags.string(),
    'locations.storage': flags.string(),
    manifest: flags.boolean(),
    'server.middleware.hot': flags.boolean(),
    'server.middleware.proxy': flags.boolean(),
    'server.proxy.host': flags.string(),
    'server.proxy.port': flags.string(),
  }
 */
//# sourceMappingURL=index.js.map
