import {__awaiter, __decorate} from 'tslib'
import {cosmiconfig} from 'cosmiconfig'
import TypeScriptLoader from '@endemolshinegroup/cosmiconfig-typescript-loader'
import {boundMethod as bind} from 'autobind-decorator'
export class Config {
  constructor(app, searchPlaces) {
    this.loaders = {
      '.ts': TypeScriptLoader,
    }
    this.app = app
    this.searchPlaces = searchPlaces
  }
  get() {
    var _a
    return __awaiter(this, void 0, void 0, function* () {
      const res = yield cosmiconfig(this.app.name, {
        searchPlaces: this.searchPlaces,
        loaders: this.loaders,
      }).search()
      return (_a =
        res === null || res === void 0 ? void 0 : res.config) !==
        null && _a !== void 0
        ? _a
        : {}
    })
  }
  apply() {
    return __awaiter(this, void 0, void 0, function* () {
      const config = yield this.get()
      if (config.extensions) {
        yield Promise.all(
          config.extensions.map(moduleImport => {
            this.app.extensions.add(require(moduleImport))
          }),
        )
      }
      Object.keys(config)
        .filter(key => key !== 'extensions')
        .forEach(key => {
          this.app[key] && this.app[key](config[key])
        })
    })
  }
}
__decorate([bind], Config.prototype, 'get', null)
__decorate([bind], Config.prototype, 'apply', null)
//# sourceMappingURL=Config.js.map
