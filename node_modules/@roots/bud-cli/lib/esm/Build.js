import {__awaiter, __decorate} from 'tslib'
import Command from './Command'
import {Config} from './Config'
import * as flags from './flags/index'
import {boundMethod as bind} from 'autobind-decorator'
import {isFunction} from 'lodash'
export default class Build extends Command {
  run() {
    return __awaiter(this, void 0, void 0, function* () {
      this.app.mode = this.mode
      yield this.doStatics()
      yield this.builder([
        `${this.app.name}.ts`,
        `${this.app.name}.js`,
        `${this.app.name}.config.ts`,
        `${this.app.name}.config.js`,
      ])
      yield this.builder([
        `${this.app.name}.${this.app.mode}.ts`,
        `${this.app.name}.${this.app.mode}.js`,
        `${this.app.name}.${this.app.mode}.config.ts`,
        `${this.app.name}.${this.app.mode}.config.js`,
      ])
      const flags = this.parse(Build).flags
      Object.entries(flags).forEach(([k, v]) => {
        this.app.store.set(k, v)
      })
      this.app.run()
    })
  }
  doStatics() {
    return __awaiter(this, void 0, void 0, function* () {
      yield new Config(this.app, [
        `${this.app.name}.json`,
        `${this.app.name}.yaml`,
        `${this.app.name}.yml`,
        `${this.app.name}.config.json`,
        `${this.app.name}.config.yaml`,
        `${this.app.name}.config.yml`,
      ]).apply()
      yield new Config(this.app, [
        `${this.app.name}.${this.app.mode}.json`,
        `${this.app.name}.${this.app.mode}.yaml`,
        `${this.app.name}.${this.app.mode}.yml`,
        `${this.app.name}.${this.app.mode}.config.json`,
        `${this.app.name}.${this.app.mode}.config.yaml`,
        `${this.app.name}.${this.app.mode}.config.yml`,
      ]).apply()
      yield new Config(this.app, [
        `${this.app.name}.${this.app.mode}.json`,
        `${this.app.name}.${this.app.mode}.yaml`,
        `${this.app.name}.${this.app.mode}.yml`,
        `${this.app.name}.${this.app.mode}.config.json`,
        `${this.app.name}.${this.app.mode}.config.yaml`,
        `${this.app.name}.${this.app.mode}.config.yml`,
      ]).apply()
    })
  }
  builder(configs) {
    return __awaiter(this, void 0, void 0, function* () {
      const builder = yield new Config(this.app, configs).get()
      this.app = !isFunction(builder)
        ? this.app
        : builder(this.app)
    })
  }
}
Build.flags = {
  help: flags.help({char: 'h'}),
  cache: flags.boolean(),
  ci: flags.boolean(),
  debug: flags.boolean(),
  log: flags.boolean(),
  hash: flags.boolean(),
  install: flags.boolean(),
  manifest: flags.boolean(),
}
__decorate([bind], Build.prototype, 'doStatics', null)
__decorate([bind], Build.prototype, 'builder', null)
//# sourceMappingURL=Build.js.map
