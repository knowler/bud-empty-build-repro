import { flags } from '@oclif/command';
export declare const boolean: typeof flags.boolean;
export declare const help: (opts?: Partial<import("@oclif/parser/lib/flags").IBooleanFlag<boolean>>) => import("@oclif/parser/lib/flags").IBooleanFlag<void>;
export declare const string: flags.Definition<string>;
/**
 * --cache
 */
export declare const cache: flags.Definition<{
    [x: string]: any;
}>;
/**
 * --ci
 */
export declare const ci: flags.Definition<{
    [x: string]: any;
}>;
/**
 * --debug
 */
export declare const debug: flags.Definition<{
    [x: string]: any;
}>;
/**
 * --log
 */
export declare const log: flags.Definition<{
    [x: string]: any;
}>;
/**
 * --log
 */
export declare const manifest: flags.Definition<{
    [x: string]: any;
}>;
/**
 *
 * {
    help: flags.help({char: 'h'}),
    cache: flags.boolean(),
    ci: flags.boolean(),
    debug: flags.boolean(),
    log: flags.boolean(),
    hash: flags.boolean(),
    install: flags.boolean(),
    'locations.project': flags.string(),
    'locations.src': flags.string(),
    'locations.dist': flags.string(),
    'locations.storage': flags.string(),
    manifest: flags.boolean(),
    'server.middleware.hot': flags.boolean(),
    'server.middleware.proxy': flags.boolean(),
    'server.proxy.host': flags.string(),
    'server.proxy.port': flags.string(),
  }
 */
//# sourceMappingURL=index.d.ts.map