import {__decorate} from 'tslib'
import {Service as Base} from '@roots/bud-framework'
import React from 'react'
import {render, Text} from 'ink'
import {isString} from 'lodash'
import {boundMethod as bind} from 'autobind-decorator'
import {Dashboard as DashboardComponent} from './Dashboard'
import {Error} from '../Error/index'
import {Write} from '../Write/index'
import {Screen} from '../components/Screen'
import {Mark} from '../Mark/index'
export class Dashboard extends Base {
  constructor() {
    super(...arguments)
    this.name = 'dashboard'
  }
  register() {
    Object.assign(this.app, {
      write: Write,
      error: Error,
    })
  }
  run() {
    this.info('Initializing dashboard')
    if (this.app.store.isTrue('ci')) {
      return
    }
    this.render(
      React.createElement(DashboardComponent, {bud: this.app}),
    )
  }
  renderError(body, title) {
    return (this.dashboard = render(
      React.createElement(
        Screen,
        null,
        React.createElement(Mark, {text: this.app.name}),
        React.createElement(Error, {body: body, title: title}),
      ),
    ))
  }
  render(Component) {
    if (this.app.store.isTrue('ci')) return
    const Output = () =>
      isString(Component)
        ? React.createElement(Text, null, Component)
        : Array.isArray(Component)
        ? Component.map((c, id) =>
            React.createElement(Text, {key: id}, c),
          )
        : Component
    return (this.dashboard = render(
      React.createElement(
        Screen,
        null,
        React.createElement(Mark, {text: this.app.name}),
        React.createElement(Output, null),
      ),
    ))
  }
  kill() {
    this.dashboard.unmount()
  }
}
__decorate([bind], Dashboard.prototype, 'register', null)
__decorate([bind], Dashboard.prototype, 'run', null)
__decorate([bind], Dashboard.prototype, 'renderError', null)
__decorate([bind], Dashboard.prototype, 'render', null)
__decorate([bind], Dashboard.prototype, 'kill', null)
//# sourceMappingURL=index.js.map
