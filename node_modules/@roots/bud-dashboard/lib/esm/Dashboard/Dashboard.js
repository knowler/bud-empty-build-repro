import React from 'react'
import {Text, Static, Box, useInput} from 'ink'
import {useStyle} from '@roots/ink-use-style'
import {isEqual} from 'lodash'
import {Assets, Time, Git, Progress, Module} from '../components'
import {useCompilation, usePackageJson} from '../hooks'
const Dashboard = ({bud}) => {
  var _a, _b, _c
  const compilation = useCompilation(bud)
  const theme = useStyle(bud.store.get('theme'))
  const pkg = usePackageJson(bud)
  useInput(input => {
    if (isEqual(input, 'q')) {
      try {
        process.exit()
      } catch (err) {}
    }
  })
  const appProps = Object.assign({bud, theme, pkg}, compilation)
  return React.createElement(
    Box,
    {flexDirection: 'column'},
    ((_a = appProps.errors) === null || _a === void 0
      ? void 0
      : _a.length) > 0 &&
      React.createElement(
        Static,
        {marginBottom: 1, items: appProps.errors},
        (err, id) =>
          React.createElement(
            Module,
            {
              key: `${id}-webpack-error`,
              color: appProps.theme.colors.error,
              labelColor: theme.colors.foreground,
              label: `Error: ${err.moduleName}`,
            },
            React.createElement(
              Box,
              {width: theme.bounds.width - 4},
              React.createElement(Text, null, err.message),
            ),
          ),
      ),
    appProps.hasWarnings &&
      ((_b = appProps.warnings) === null || _b === void 0
        ? void 0
        : _b.length) > 0 &&
      React.createElement(
        Static,
        {marginBottom: 1, items: appProps.warnings},
        warning =>
          React.createElement(
            Module,
            {
              key: warning.moduleIdentifier,
              color: appProps.theme.colors.warning,
              labelColor: theme.colors.foreground,
              label: `Error: ${warning.moduleName}`,
            },
            React.createElement(
              Box,
              {width: theme.bounds.width - 4},
              React.createElement(Text, null, warning.message),
            ),
          ),
      ),
    ((_c = appProps.stats) === null || _c === void 0
      ? void 0
      : _c.assets) &&
      React.createElement(
        React.Fragment,
        null,
        React.createElement(Assets, Object.assign({}, appProps)),
        React.createElement(Time, Object.assign({}, appProps)),
      ),
    React.createElement(Progress, Object.assign({}, appProps)),
    React.createElement(Git, {theme: appProps.theme}),
  )
}
export {Dashboard}
//# sourceMappingURL=Dashboard.js.map
