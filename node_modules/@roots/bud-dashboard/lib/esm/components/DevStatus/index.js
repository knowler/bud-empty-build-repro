import {__awaiter} from 'tslib'
import React, {useEffect, useState} from 'react'
import {Box, Text, Spacer} from 'ink'
import Spinner from 'ink-spinner'
import {checkStatus} from './checkStatus'
/**
 * Development server
 */
export const DevStatus = props => {
  const isDevelopment = props.bud.isDevelopment
  const [proxyStatus, setProxyStatus] = useState(null)
  const [serverStatus, setServerStatus] = useState(null)
  const server = props.bud.server.config.all()
  useEffect(() => {
    server.middleware.proxy
      ? (() =>
          __awaiter(void 0, void 0, void 0, function* () {
            setInterval(
              () =>
                __awaiter(void 0, void 0, void 0, function* () {
                  return yield checkStatus(
                    server.middleware.proxy,
                    server.proxy.host,
                    server.proxy.port,
                    setProxyStatus,
                  )
                }),
              5000,
            )
          }))()
      : null
    server.middleware.dev
      ? (() =>
          __awaiter(void 0, void 0, void 0, function* () {
            setInterval(
              () =>
                __awaiter(void 0, void 0, void 0, function* () {
                  return yield checkStatus(
                    server.middleware.dev,
                    server.host,
                    server.port,
                    setServerStatus,
                  )
                }),
              5000,
            )
          }))()
      : null
  }, [server])
  return isDevelopment
    ? React.createElement(
        Box,
        {flexDirection: 'row', justifyContent: 'space-between'},
        React.createElement(
          Box,
          {flexDirection: 'column'},
          React.createElement(Status, {
            label: 'SERVE',
            status: serverStatus,
            colors: props.theme.colors,
            enabled: server.middleware.dev,
            host: server.host,
            port: server.port,
          }),
          React.createElement(Status, {
            label: 'PROXY',
            status: proxyStatus,
            colors: props.theme.colors,
            enabled: server.middleware.proxy,
            host: server.proxy.host,
            port: server.proxy.port,
          }),
          server.middleware.hot
            ? React.createElement(Text, null, `HMR:   enabled`)
            : React.createElement(
                Text,
                {dimColor: true},
                `HMR:   disabled`,
              ),
        ),
      )
    : React.createElement(
        Box,
        {flexDirection: 'row', justifyContent: 'space-between'},
        React.createElement(Spacer, null),
      )
}
/**
 * Report status code.
 */
const Status = ({
  enabled,
  host,
  port,
  status,
  label,
  colors,
}) => {
  const color = (() => {
    switch (true) {
      case status == 200:
        return colors.success
      case status >= 400:
        return colors.error
      default:
        return colors.warning
    }
  })()
  return enabled
    ? React.createElement(
        Text,
        null,
        `${label}: ${host}:${port}`,
        status
          ? React.createElement(
              Text,
              {color: color},
              ' [',
              status,
              ']',
            )
          : React.createElement(
              Text,
              null,
              ' ',
              React.createElement(Spinner, null),
            ),
      )
    : React.createElement(
        Text,
        {dimColor: true},
        `${label}: disabled`,
      )
}
//# sourceMappingURL=index.js.map
