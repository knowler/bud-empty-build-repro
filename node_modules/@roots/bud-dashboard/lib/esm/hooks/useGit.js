import {__awaiter} from 'tslib'
import {useState, useEffect} from 'react'
import execa from 'execa'
import {isEqual} from 'lodash'
export const useGit = () => {
  var _a
  const [isRepo, setIsRepo] = useState(null)
  const [head, setHead] = useState(null)
  const [branch, setBranch] = useState(null)
  const [status, setStatus] = useState(null)
  useEffect(() => {
    isEqual(isRepo, null) &&
      (() =>
        __awaiter(void 0, void 0, void 0, function* () {
          try {
            yield execa('git', [
              'rev-parse',
              '--is-inside-work-tree',
            ])
            setIsRepo(true)
          } catch (err) {
            setIsRepo(false)
          }
        }))()
  }, [])
  useEffect(() => {
    isRepo &&
      setInterval(
        () =>
          __awaiter(void 0, void 0, void 0, function* () {
            try {
              const {stdout} = yield execa('git', [
                'status',
                '--short',
              ])
              const statusRes = stdout.toString()
                ? '0'
                : stdout
                    .toString()
                    .split('\n')
                    .filter(item => item !== '').length
              !isEqual(status, statusRes) && setStatus(statusRes)
            } catch (err) {
              return
            }
          }),
        1000,
      )
  }, [isRepo])
  useEffect(() => {
    isRepo &&
      setInterval(() =>
        __awaiter(void 0, void 0, void 0, function* () {
          const {stdout} = yield execa('git', [
            'branch',
            '--show-current',
            '--no-color',
          ])
          setBranch(stdout.toString())
        }),
      )
  }, [isRepo])
  useEffect(() => {
    isRepo &&
      setInterval(() =>
        __awaiter(void 0, void 0, void 0, function* () {
          try {
            const {stdout} = yield execa('git', [
              'rev-parse',
              '--short',
              'HEAD',
              '--no-color',
            ])
            setHead(stdout.toString())
          } catch (err) {
            return
          }
        }),
      )
  }, [isRepo])
  const hasError =
    ((_a = [head, branch, status].filter(res =>
      res === null || res === void 0 ? void 0 : res.stderr,
    )) === null || _a === void 0
      ? void 0
      : _a.length) > 0
  return {
    isRepo,
    head,
    branch,
    status,
    hasError,
  }
}
//# sourceMappingURL=useGit.js.map
