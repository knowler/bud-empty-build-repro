'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.useGit = void 0
const tslib_1 = require('tslib')
const react_1 = require('react')
const execa_1 = tslib_1.__importDefault(require('execa'))
const lodash_1 = require('lodash')
const useGit = () => {
  var _a
  const [isRepo, setIsRepo] = react_1.useState(null)
  const [head, setHead] = react_1.useState(null)
  const [branch, setBranch] = react_1.useState(null)
  const [status, setStatus] = react_1.useState(null)
  react_1.useEffect(() => {
    lodash_1.isEqual(isRepo, null) &&
      (() =>
        tslib_1.__awaiter(void 0, void 0, void 0, function* () {
          try {
            yield execa_1.default('git', [
              'rev-parse',
              '--is-inside-work-tree',
            ])
            setIsRepo(true)
          } catch (err) {
            setIsRepo(false)
          }
        }))()
  }, [])
  react_1.useEffect(() => {
    isRepo &&
      setInterval(
        () =>
          tslib_1.__awaiter(
            void 0,
            void 0,
            void 0,
            function* () {
              try {
                const {stdout} = yield execa_1.default('git', [
                  'status',
                  '--short',
                ])
                const statusRes = stdout.toString()
                  ? '0'
                  : stdout
                      .toString()
                      .split('\n')
                      .filter(item => item !== '').length
                !lodash_1.isEqual(status, statusRes) &&
                  setStatus(statusRes)
              } catch (err) {
                return
              }
            },
          ),
        1000,
      )
  }, [isRepo])
  react_1.useEffect(() => {
    isRepo &&
      setInterval(() =>
        tslib_1.__awaiter(void 0, void 0, void 0, function* () {
          const {stdout} = yield execa_1.default('git', [
            'branch',
            '--show-current',
            '--no-color',
          ])
          setBranch(stdout.toString())
        }),
      )
  }, [isRepo])
  react_1.useEffect(() => {
    isRepo &&
      setInterval(() =>
        tslib_1.__awaiter(void 0, void 0, void 0, function* () {
          try {
            const {stdout} = yield execa_1.default('git', [
              'rev-parse',
              '--short',
              'HEAD',
              '--no-color',
            ])
            setHead(stdout.toString())
          } catch (err) {
            return
          }
        }),
      )
  }, [isRepo])
  const hasError =
    ((_a = [head, branch, status].filter(res =>
      res === null || res === void 0 ? void 0 : res.stderr,
    )) === null || _a === void 0
      ? void 0
      : _a.length) > 0
  return {
    isRepo,
    head,
    branch,
    status,
    hasError,
  }
}
exports.useGit = useGit
//# sourceMappingURL=useGit.js.map
