'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.useCompilation = void 0
const tslib_1 = require('tslib')
const react_1 = require('react')
const webpack_1 = tslib_1.__importDefault(require('webpack'))
/**
 * Use compilation
 */
const useCompilation = app => {
  var _a, _b
  const [stats, setStats] = react_1.useState(
    (_b =
      (_a =
        app === null || app === void 0
          ? void 0
          : app.compiler) === null || _a === void 0
        ? void 0
        : _a.stats) === null || _b === void 0
      ? void 0
      : _b.json,
  )
  const [errors, setErrors] = react_1.useState(null)
  const [hasErrors, setHasErrors] = react_1.useState(false)
  const [warnings, setWarnings] = react_1.useState(null)
  const [hasWarnings, setHasWarnings] = react_1.useState(false)
  const [progress, setProgress] = react_1.useState(null)
  const [closed, setClosed] = react_1.useState(false)
  /**
   * Compilation callback
   * production mode callback takes two parameters (webpack err and stats)
   * however, the done hook used in development just takes one (stats)
   *
   * here we parse the callback args so that we dont have to
   * duplicate the callback.
   */
  const callback = (...args) => {
    const [err, stats] =
      args.length > 1 ? args : [null, args.pop()]
    app.when(err, () => console.error(err))
    const json =
      stats === null || stats === void 0
        ? void 0
        : stats.toJson(app.compiler.statsOptions)
    if (json) {
      setStats(json)
      setErrors(json.errors)
      setWarnings(json.errors)
      app
        .when(
          json === null || json === void 0
            ? void 0
            : json.hasErrors,
          () => setHasErrors(true),
          () => setErrors(null),
        )
        .when(
          json === null || json === void 0
            ? void 0
            : json.hasWarnings,
          () => setHasWarnings(true),
          () => setWarnings(null),
        )
    }
  }
  react_1.useEffect(() => {
    if (app.compiler.isCompiled) return
    app.compiler.compile(app.hooks.filter('after'))
    app.compiler.instance.hooks.done.tap(app.name, () =>
      app.compiler.instance.close(err => {
        err &&
          setErrors([
            ...(errors !== null && errors !== void 0
              ? errors
              : []),
            err,
          ])
        setClosed(true)
        app.isProduction && setTimeout(process.exit, 1000)
      }),
    )
    new webpack_1.default.ProgressPlugin(
      (percentage, message) => {
        const decimal =
          percentage && typeof percentage === 'number'
            ? percentage
            : 0
        setProgress({
          decimal,
          percentage: `${Math.floor(decimal * 100)}%`,
          message,
        })
      },
    ).apply(app.compiler.instance)
    app.when(
      !app.isDevelopment,
      () => {
        app.compiler.instance.run(callback)
      },
      ({server}) => {
        server.run(app.compiler.instance)
      },
    )
  })
  return {
    closed,
    progress,
    stats,
    errors,
    hasErrors,
    warnings,
    hasWarnings,
  }
}
exports.useCompilation = useCompilation
//# sourceMappingURL=useCompilation.js.map
