'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.DevStatus = void 0
const tslib_1 = require('tslib')
const react_1 = tslib_1.__importStar(require('react'))
const ink_1 = require('ink')
const ink_spinner_1 = tslib_1.__importDefault(
  require('ink-spinner'),
)
const checkStatus_1 = require('./checkStatus')
/**
 * Development server
 */
const DevStatus = props => {
  const isDevelopment = props.bud.isDevelopment
  const [proxyStatus, setProxyStatus] = react_1.useState(null)
  const [serverStatus, setServerStatus] = react_1.useState(null)
  const server = props.bud.server.config.all()
  react_1.useEffect(() => {
    server.middleware.proxy
      ? (() =>
          tslib_1.__awaiter(
            void 0,
            void 0,
            void 0,
            function* () {
              setInterval(
                () =>
                  tslib_1.__awaiter(
                    void 0,
                    void 0,
                    void 0,
                    function* () {
                      return yield checkStatus_1.checkStatus(
                        server.middleware.proxy,
                        server.proxy.host,
                        server.proxy.port,
                        setProxyStatus,
                      )
                    },
                  ),
                5000,
              )
            },
          ))()
      : null
    server.middleware.dev
      ? (() =>
          tslib_1.__awaiter(
            void 0,
            void 0,
            void 0,
            function* () {
              setInterval(
                () =>
                  tslib_1.__awaiter(
                    void 0,
                    void 0,
                    void 0,
                    function* () {
                      return yield checkStatus_1.checkStatus(
                        server.middleware.dev,
                        server.host,
                        server.port,
                        setServerStatus,
                      )
                    },
                  ),
                5000,
              )
            },
          ))()
      : null
  }, [server])
  return isDevelopment
    ? react_1.default.createElement(
        ink_1.Box,
        {flexDirection: 'row', justifyContent: 'space-between'},
        react_1.default.createElement(
          ink_1.Box,
          {flexDirection: 'column'},
          react_1.default.createElement(Status, {
            label: 'SERVE',
            status: serverStatus,
            colors: props.theme.colors,
            enabled: server.middleware.dev,
            host: server.host,
            port: server.port,
          }),
          react_1.default.createElement(Status, {
            label: 'PROXY',
            status: proxyStatus,
            colors: props.theme.colors,
            enabled: server.middleware.proxy,
            host: server.proxy.host,
            port: server.proxy.port,
          }),
          server.middleware.hot
            ? react_1.default.createElement(
                ink_1.Text,
                null,
                `HMR:   enabled`,
              )
            : react_1.default.createElement(
                ink_1.Text,
                {dimColor: true},
                `HMR:   disabled`,
              ),
        ),
      )
    : react_1.default.createElement(
        ink_1.Box,
        {flexDirection: 'row', justifyContent: 'space-between'},
        react_1.default.createElement(ink_1.Spacer, null),
      )
}
exports.DevStatus = DevStatus
/**
 * Report status code.
 */
const Status = ({
  enabled,
  host,
  port,
  status,
  label,
  colors,
}) => {
  const color = (() => {
    switch (true) {
      case status == 200:
        return colors.success
      case status >= 400:
        return colors.error
      default:
        return colors.warning
    }
  })()
  return enabled
    ? react_1.default.createElement(
        ink_1.Text,
        null,
        `${label}: ${host}:${port}`,
        status
          ? react_1.default.createElement(
              ink_1.Text,
              {color: color},
              ' [',
              status,
              ']',
            )
          : react_1.default.createElement(
              ink_1.Text,
              null,
              ' ',
              react_1.default.createElement(
                ink_spinner_1.default,
                null,
              ),
            ),
      )
    : react_1.default.createElement(
        ink_1.Text,
        {dimColor: true},
        `${label}: disabled`,
      )
}
//# sourceMappingURL=index.js.map
