import {__decorate} from 'tslib'
import {Service} from '@roots/bud-framework'
import {boundMethod as bind} from 'autobind-decorator'
import {isUndefined} from 'lodash'
import {Extension} from '../Extension/index'
export class Extensions extends Service {
  constructor() {
    super(...arguments)
    this.name = '@roots/bud-extensions'
  }
  register() {
    this.every((_name, extension) => {
      return this.registerExtension(extension)
    })
  }
  boot() {
    this.every((_name, extension) => {
      return this.bootExtension(extension)
    })
  }
  registerExtension(extension) {
    this.log(`Registering extension: %s`, extension.name)
    this.set(
      extension.name,
      new Extension(this.app, extension).register(),
    )
    this.log(`Extension registered: %s`, extension.name)
  }
  bootExtension(extension) {
    this.log(`Booting extension: %s`, extension.name)
    this.set(
      extension.name,
      this.get(extension.name).boot(this.app),
    )
  }
  add(extension) {
    this.log(`Adding extension: %s`, extension.name)
    this.registerExtension(extension)
    this.bootExtension(extension)
  }
  make() {
    this.log(`Building extensions: %s`, this.getKeys())
    const plugins = this.getKeys()
      .map(name => this.get(name).make)
      .filter(ext => !isUndefined(ext))
    return plugins
  }
  discard(pkg) {
    this.remove(pkg)
    return this.app
  }
}
__decorate([bind], Extensions.prototype, 'register', null)
__decorate([bind], Extensions.prototype, 'boot', null)
__decorate(
  [bind],
  Extensions.prototype,
  'registerExtension',
  null,
)
__decorate([bind], Extensions.prototype, 'bootExtension', null)
__decorate([bind], Extensions.prototype, 'add', null)
__decorate([bind], Extensions.prototype, 'make', null)
__decorate([bind], Extensions.prototype, 'discard', null)
//# sourceMappingURL=index.js.map
