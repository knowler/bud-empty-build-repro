import {__decorate} from 'tslib'
import {Service} from '@roots/bud-framework'
import chokidar from 'chokidar'
import {sync} from 'globby'
import {resolve} from 'path'
import {boundMethod as bind} from 'autobind-decorator'
import * as middleware from '../middleware'
import {injectClient} from '../util/injectClient'
export class Server extends Service {
  constructor() {
    super(...arguments)
    this.name = '@roots/bud-server'
    this.middleware = {}
    this._assets = [resolve(__dirname, '../client/index.js')]
  }
  get instance() {
    return this._instance
  }
  set instance(instance) {
    this._instance = instance
  }
  get watcher() {
    return this._watcher
  }
  set watcher(watcher) {
    this._watcher = watcher
  }
  get assets() {
    return this._assets
  }
  get isWatchable() {
    return (
      Array.isArray(this.getWatchedFilesArray()) &&
      this.getWatchedFilesArray().length > 0
    )
  }
  getWatchedFilesArray() {
    return this.config
      .get('watch.files')
      .map(file => this.app.path('project', file))
  }
  booted() {
    this.watcher = chokidar.watch(
      sync(this.config.get('watch.files')),
      this.config.get('watch.options'),
    )
  }
  processMiddlewares(compiler) {
    Object.entries(middleware).map(([key, generate]) => {
      if (this.config.enabled(`middleware.${key}`)) {
        this.info(`Enabling ${key}`)
        this.middleware[key] = generate({
          config: this.config,
          compiler,
        })
      }
    })
    Object.values(this.middleware).forEach(middleware =>
      this.instance.use(middleware),
    )
  }
  run(compiler) {
    var _a
    /**
     * __roots route
     */
    this.instance
      .route('/__roots/config.json')
      .get((_req, res) => {
        res.send(
          Object.assign(
            Object.assign({}, this.app.store.all()),
            this.config.all(),
          ),
        )
        res.end()
      })
    this.processMiddlewares(compiler)
    /**
     * Listen
     */
    this.instance.listen(this.config.get('port'), () => {
      this.info(
        `Server listening on %s`,
        this.config.get('port'),
      )
      this.info(
        Object.assign(Object.assign({}, this.config.all()), {
          middleware,
        }),
      )
    })
    this.isWatchable &&
      ((_a = this.watcher) === null || _a === void 0
        ? void 0
        : _a.on('change', path => {
            this.middleware.hot.publish({
              action: 'reload',
              message: `Detected file change: ${path}. Reloading window.`,
            })
          }))
    return this
  }
  inject() {
    injectClient(this.app, this.assets)
  }
}
__decorate(
  [bind],
  Server.prototype,
  'getWatchedFilesArray',
  null,
)
__decorate([bind], Server.prototype, 'booted', null)
__decorate([bind], Server.prototype, 'processMiddlewares', null)
__decorate([bind], Server.prototype, 'run', null)
__decorate([bind], Server.prototype, 'inject', null)
//# sourceMappingURL=index.js.map
