'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.Server = void 0
const tslib_1 = require('tslib')
const bud_framework_1 = require('@roots/bud-framework')
const chokidar_1 = tslib_1.__importDefault(require('chokidar'))
const globby_1 = require('globby')
const path_1 = require('path')
const autobind_decorator_1 = require('autobind-decorator')
const middleware = tslib_1.__importStar(require('../middleware'))
const injectClient_1 = require('../util/injectClient')
class Server extends bud_framework_1.Service {
  constructor() {
    super(...arguments)
    this.name = '@roots/bud-server'
    this.middleware = {}
    this._assets = [
      path_1.resolve(__dirname, '../client/index.js'),
    ]
  }
  get instance() {
    return this._instance
  }
  set instance(instance) {
    this._instance = instance
  }
  get watcher() {
    return this._watcher
  }
  set watcher(watcher) {
    this._watcher = watcher
  }
  get assets() {
    return this._assets
  }
  get isWatchable() {
    return (
      Array.isArray(this.getWatchedFilesArray()) &&
      this.getWatchedFilesArray().length > 0
    )
  }
  getWatchedFilesArray() {
    return this.config
      .get('watch.files')
      .map(file => this.app.path('project', file))
  }
  booted() {
    this.watcher = chokidar_1.default.watch(
      globby_1.sync(this.config.get('watch.files')),
      this.config.get('watch.options'),
    )
  }
  processMiddlewares(compiler) {
    Object.entries(middleware).map(([key, generate]) => {
      if (this.config.enabled(`middleware.${key}`)) {
        this.info(`Enabling ${key}`)
        this.middleware[key] = generate({
          config: this.config,
          compiler,
        })
      }
    })
    Object.values(this.middleware).forEach(middleware =>
      this.instance.use(middleware),
    )
  }
  run(compiler) {
    var _a
    /**
     * __roots route
     */
    this.instance
      .route('/__roots/config.json')
      .get((_req, res) => {
        res.send(
          Object.assign(
            Object.assign({}, this.app.store.all()),
            this.config.all(),
          ),
        )
        res.end()
      })
    this.processMiddlewares(compiler)
    /**
     * Listen
     */
    this.instance.listen(this.config.get('port'), () => {
      this.info(
        `Server listening on %s`,
        this.config.get('port'),
      )
      this.info(
        Object.assign(Object.assign({}, this.config.all()), {
          middleware,
        }),
      )
    })
    this.isWatchable &&
      ((_a = this.watcher) === null || _a === void 0
        ? void 0
        : _a.on('change', path => {
            this.middleware.hot.publish({
              action: 'reload',
              message: `Detected file change: ${path}. Reloading window.`,
            })
          }))
    return this
  }
  inject() {
    injectClient_1.injectClient(this.app, this.assets)
  }
}
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Server.prototype,
  'getWatchedFilesArray',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Server.prototype,
  'booted',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Server.prototype,
  'processMiddlewares',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Server.prototype,
  'run',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Server.prototype,
  'inject',
  null,
)
exports.Server = Server
//# sourceMappingURL=index.js.map
