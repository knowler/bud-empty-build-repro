var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value)
          })
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value))
        } catch (e) {
          reject(e)
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value))
        } catch (e) {
          reject(e)
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected)
      }
      step(
        (generator = generator.apply(
          thisArg,
          _arguments || [],
        )).next(),
      )
    })
  }
const client = require('webpack-hot-middleware/client?quiet=true')
const {overlay} = require('./ErrorOverlay')
const {indicator} = require('./Indicator')
/**
 * Client
 */
const run = () =>
  __awaiter(this, void 0, void 0, function* () {
    const res = yield fetch('/__roots/config.json')
    const server = yield res.json()
    server.browser.log &&
      (() => {
        console.info(`[Bud] Development mode`)
        console.info(
          `[Bud] You should NOT be seeing this message in production.`,
        )
      })()
    /**
     * Instantiate overlay
     */
    server.browser.overlay && client.useCustomOverlay(overlay)
    /**
     * Loading indicator
     */
    server.browser.indicator &&
      (() => {
        indicator.init()
        client.subscribeAll(payload => {
          var _a, _b
          const reload =
            (payload === null || payload === void 0
              ? void 0
              : payload.action) == 'reload'
          const complete =
            (payload === null || payload === void 0
              ? void 0
              : payload.action) == 'built'
          const pending =
            (payload === null || payload === void 0
              ? void 0
              : payload.action) == 'building'
          const hasWarnings =
            ((_a =
              payload === null || payload === void 0
                ? void 0
                : payload.warnings) === null || _a === void 0
              ? void 0
              : _a.length) > 0
          const hasErrors =
            ((_b =
              payload === null || payload === void 0
                ? void 0
                : payload.errors) === null || _b === void 0
              ? void 0
              : _b.length) > 0
          server.browser.log &&
            (() => {
              hasWarnings &&
                console.warn('[Bud] Warning', payload.warnings)
              hasErrors &&
                console.error('[Bud] Error', payload.errors)
              pending && console.log('[Bud] Compiling...')
              complete &&
                !hasErrors &&
                !hasWarnings &&
                console.log(
                  `[Bud] Compilation success [${payload.hash}] (${payload.time}ms)`,
                )
              reload &&
                console.log(
                  `[Bud] Project template modified. Reloading now.`,
                )
            })()
          reload && indicator.reload()
          payload &&
            indicator.update({
              payload,
              complete,
              pending,
              hasWarnings,
              hasErrors,
            })
        })
      })()
  })
run()
//# sourceMappingURL=index.js.map
