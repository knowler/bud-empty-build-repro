import { Api } from '@roots/bud-framework';
import { GlobTask } from 'globby';
declare module '@roots/bud-framework' {
    interface Framework {
        /**
         * ## entry
         *
         * Generate application entrypoints from source asset paths.
         *
         * ### Globbing
         *
         * Uses [fast-glob](https://git.io/JkGbw) syntax.
         *
         * **Supported patterns**
         *
         * - `*` matches any number of characters, but not `/`
         * - `?` matches a single character, but not `/`
         * - `**` matches any number of characters, including `/`,
         *   as long as it's the only thing in a path part
         * - `{}` allows for a comma-separated list  of "or" expressions
         * - `!` at the beginning of a pattern will negate the match
         *
         * ### Usage
         *
         * Create an entrypoint from a single file:
         *
         * ```js
         * app.entry('app', 'app.js')
         * ```
         *
         * Create an entrypoint from multiple files:
         *
         * ```js
         * app.entry('app', ['js/app.js', 'css/app.css'])
         * ```
         *
         * Create an entrypoint comprised of all js assets:
         *
         * ```js
         * app.entry('app', '*.js')
         * ```
         *
         * You may create more than one entrypoint using object syntax:
         *
         * ```js
         * app.entry({
         *   scripts: '*.js',
         *   styles: ['*.css', '*.scss'],
         * })
         * ```
         *
         * Declare entrypoint dependencies:
         *
         * ```js
         * app.entry({
         *  react: {
         *    import: ['react', 'react-dom']
         *  },
         *  app: {
         *    import: ['app.js'],
         *    dependOn: ['react'],
         *  },
         * })
         */
        entry: Api.Entry;
    }
    namespace Api {
        interface Entry {
            (name: string, entrypoint: Entry.Value): Framework;
        }
        interface Entry {
            (entrypoints: Entry.Input): Framework;
        }
        namespace Entry {
            interface Object {
                import?: string[];
                dependsOn?: string[];
            }
            interface Input {
                [k: string]: Object | Object['import'] | string;
            }
            type Value = GlobTask['pattern'] | Array<GlobTask['pattern']>;
        }
    }
}
export declare const entry: Api.Entry;
//# sourceMappingURL=entry.d.ts.map