'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.transform = exports.isProvided = void 0
const lodash_1 = require('lodash')
/**
 * Pkg map
 */
const pkgMap = new Map([
  [
    'jquery',
    {
      window: lodash_1.join(['jQuery'], '.'),
      enqueue: 'jquery',
    },
  ],
  [
    'lodash',
    {
      window: lodash_1.join(['lodash'], '.'),
      enqueue: 'lodash',
    },
  ],
  [
    'react',
    {
      window: lodash_1.join(['React'], '.'),
      enqueue: 'react',
    },
  ],
  [
    'react-dom',
    {
      window: lodash_1.join(['ReactDOM'], '.'),
      enqueue: 'react-dom',
    },
  ],
])
/**
 * Camelize @wordpress pkg names
 */
const camelize = pkg =>
  pkg.replace(/-(.)/g, (_m, g) => g.toUpperCase())
/**
 * Transform @wordpress pkg names
 */
const transformPkgName = pkg =>
  pkg.replace(/^@wordpress\/(.*)$/, (_m, g) => g)
/**
 * Is pkg string a wordpress window var match
 */
const isProvided = pkg => {
  return (
    pkg.startsWith('@wordpress/') ||
    ['jquery', 'react', 'react-dom', 'lodash'].includes(pkg)
  )
}
exports.isProvided = isProvided
/**
 * Transform pkg string request
 */
const transform = pkg => {
  return pkgMap.has(pkg)
    ? pkgMap.get(pkg)
    : {
        window: ['wp', camelize(transformPkgName(pkg))],
        enqueue: lodash_1.join(
          ['wp', transformPkgName(pkg)],
          '-',
        ),
      }
}
exports.transform = transform
//# sourceMappingURL=wordpressPkgs.js.map
