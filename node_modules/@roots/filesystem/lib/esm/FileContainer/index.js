import {__decorate} from 'tslib'
import path from 'path'
import * as fs from 'fs-extra'
import resolveFrom from 'resolve-from'
import _ from 'lodash'
import {sync} from 'globby'
import {Container} from '@roots/container'
import {boundMethod as bind} from 'autobind-decorator'
export class FileContainer extends Container {
  /**
   * Class constructor.
   */
  constructor(baseDir) {
    super()
    /**
     * FS-Extra library
     */
    this.fs = fs
    /**
     * PlatformPath
     */
    this.path = path
    /**
     * resolveFrom (better resolve)
     */
    this.from = resolveFrom
    /**
     * Base directory
     */
    this._baseDir = process.cwd()
    this._baseDir = baseDir
  }
  /**
   * ## setBase
   *
   * Set the FS base directory.
   *
   * ### Usage
   *
   * ```
   * fsInstance.setBase(__dirname)
   * ```
   */
  set baseDir(dir) {
    this._baseDir = dir
  }
  /**
   * ## getBase
   *
   * Returns the FS base directory.
   *
   * ### Usage
   *
   * ```
   * fsInstance.getBase()
   * ```
   */
  get baseDir() {
    return this._baseDir
  }
  /**
   * ## setDisk
   *
   * Establish the disk repository from an array of globs.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.setDisk(['*.js', '!*.css.js'])
   * ```
   */
  setDisk(glob) {
    sync(
      glob !== null && glob !== void 0
        ? glob
        : ['*', '**/*', '!vendor', '!node_modules'],
      {
        onlyFiles: false,
        cwd: this._baseDir,
        expandDirectories: true,
      },
    ).map(file => {
      this.set(file, path.join(this.baseDir, file))
    })
    return this
  }
  /**
   * ## fs.ls
   *
   * List repository contents.
   *
   * ### Usage
   *
   */
  ls(key) {
    return key ? _.get(this.repository, key) : this.repository
  }
  /**
   * ## has
   *
   * Return boolean `true` if key is a match.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.has('some/file.js')
   * ```
   */
  has(key) {
    return _.has(this.repository, key)
  }
  /**
   * ## set
   *
   * Set a value.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.set('some/file.js', '/absolute/path/to/some/file.js')
   * ```
   */
  set(key, value) {
    _.set(this.repository, [`${key}`], value)
    return this
  }
  /**
   * ## exists
   *
   * Return a boolean `true` if repository has a key and it's value
   * resolves to an actual disk location.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.exists('some/file.js')
   * ```
   */
  exists(key) {
    return this.fs.existsSync(this.get(key))
  }
  /**
   * ## ensure
   *
   * Create a file if it does not already exist. Will also create an
   * associated repository entry if it doesn't exist.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.ensure('some/file.js')
   * ```
   */
  ensure(key) {
    const file = this.has(key)
      ? this.get(key)
      : this.path.resolve(this.baseDir, key)
    this.fs.ensureFileSync(file)
    this.set(key, file)
  }
  /**
   * ## ensureDir
   *
   * Create a directory if it does not already exist. Will also create an
   * associated repository entry if it doesn't exist.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.ensureDir('some/file.js')
   * ```
   */
  ensureDir(key) {
    const dir = this.has(key)
      ? this.get(key)
      : this.path.resolve(this.baseDir, key)
    this.fs.ensureDirSync(dir)
    this.set(key, dir)
  }
  /**
   * ## read
   *
   * Read file contents as a utf8 encoded string.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.read('some/file.md')
   * ```
   */
  read(key) {
    return this.fs.readFileSync(this.get(key), 'utf8')
  }
  /**
   * ## readJson
   *
   * Retrieve file contents as a javascript object.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.readJson('some/file.json')
   * // => {json: 'contents', as: 'an object'}
   * ```
   */
  readJson(key) {
    return this.fs.readJsonSync(this.get(key))
  }
  /**
   * ## write
   *
   * Write file contents as a string
   *
   * ### Usage
   *
   * ```js
   * fsInstance.write('some/file.md', 'string contens')
   * ```
   */
  write(key, content) {
    const file = this.has(key)
      ? this.get(key)
      : this.path.resolve(this.baseDir, key)
    this.fs.writeFileSync(file, content)
    this.set(key, file)
  }
  /**
   * ## writeJson
   *
   * Write file contents as a JSON object.
   *
   * ### Usage
   *
   * ```js
   * fsInstance.writeJson(
   *   'some/file.json',
   *   {json: 'file contents'},
   * )
   * ```
   */
  writeJson(key, content) {
    const file = this.has(key)
      ? this.get(key)
      : this.path.resolve(this.baseDir, key)
    this.fs.writeJsonSync(file, content)
    this.set(key, file)
  }
  /**
   * ## require
   *
   * NodeRequire a matching file as a module
   *
   * ### Usage
   *
   * ```js
   * fsInstance.require('path/to/module.js')
   * ```
   */
  require(key) {
    return require(this.get(key))
  }
}
__decorate([bind], FileContainer.prototype, 'setDisk', null)
__decorate([bind], FileContainer.prototype, 'ls', null)
__decorate([bind], FileContainer.prototype, 'has', null)
__decorate([bind], FileContainer.prototype, 'set', null)
__decorate([bind], FileContainer.prototype, 'exists', null)
__decorate([bind], FileContainer.prototype, 'ensure', null)
__decorate([bind], FileContainer.prototype, 'ensureDir', null)
__decorate([bind], FileContainer.prototype, 'read', null)
__decorate([bind], FileContainer.prototype, 'readJson', null)
__decorate([bind], FileContainer.prototype, 'write', null)
__decorate([bind], FileContainer.prototype, 'writeJson', null)
__decorate([bind], FileContainer.prototype, 'require', null)
//# sourceMappingURL=index.js.map
