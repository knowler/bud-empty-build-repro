import {__decorate} from 'tslib'
import _ from 'lodash'
import fs from 'fs-extra'
import path from 'path'
import {FileContainer} from '..'
import {Container} from '@roots/container'
import globby from 'globby'
import {boundMethod as bind} from 'autobind-decorator'
export class FileSystem extends Container {
  constructor() {
    super(...arguments)
    /**
     * fs util
     *
     * @see fs-extra
     */
    this.fs = fs
    /**
     * Globby library.
     */
    this.glob = globby
    /**
     * cwd
     */
    this.path = path
    /**
     * Base directory
     */
    this._baseDir = process.cwd()
  }
  /**
   * Get
   *
   * Call without a key to get all disks.
   * Pass a key to get a specific disk.
   */
  get(key) {
    return _.get(this.repository, key)
  }
  /**
   * Make
   *
   * Create a new disk. Provide a name, root directory, and -- optionally --
   * a custom glob array. [ðŸ”— Documentation on bud.disk](#)
   *
   * ### Usage
   *
   * ```js
   * fs.set(
   *   'icons',
   *   bud.path('project', 'assets/icons'),
   *   ['*.svg'],
   * )
   * ```
   */
  make(key, options) {
    var _a, _b
    const baseDir =
      (_a =
        options === null || options === void 0
          ? void 0
          : options.baseDir) !== null && _a !== void 0
        ? _a
        : this.baseDir
    this.set(
      key,
      new FileContainer(baseDir).setDisk(
        (_b =
          options === null || options === void 0
            ? void 0
            : options.glob) !== null && _b !== void 0
          ? _b
          : ['*', '**/*'],
      ),
    )
    return this.get(key)
  }
  get baseDir() {
    return this._baseDir
  }
  set baseDir(baseDir) {
    this._baseDir = baseDir
  }
}
__decorate([bind], FileSystem.prototype, 'get', null)
__decorate([bind], FileSystem.prototype, 'make', null)
//# sourceMappingURL=index.js.map
