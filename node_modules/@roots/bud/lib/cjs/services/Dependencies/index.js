'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.Dependencies = void 0
const tslib_1 = require('tslib')
const dependencies_1 = require('@roots/dependencies')
const autobind_decorator_1 = require('autobind-decorator')
const fs_extra_1 = require('fs-extra')
const react_1 = tslib_1.__importDefault(require('react'))
const ink_1 = require('ink')
const Base_1 = require('./Base')
class Dependencies extends Base_1.Base {
  pkg() {
    return fs_extra_1.readJsonSync(
      this.app.path('project', 'package.json'),
    )
  }
  register() {
    this.manager = new dependencies_1.Dependencies(
      this.app.path('project'),
    )
  }
  shouldInstall(dep) {
    var _a, _b, _c
    const pkgJson = this.pkg()
    const shouldInstall =
      !pkgJson ||
      !((_c = Object.keys(
        Object.assign(
          Object.assign(
            {},
            (_a = pkgJson['dependencies']) !== null &&
              _a !== void 0
              ? _a
              : {},
          ),
          (_b = pkgJson['devDependencies']) !== null &&
            _b !== void 0
            ? _b
            : {},
        ),
      )) === null || _c === void 0
        ? void 0
        : _c.includes(dep))
    if (!shouldInstall) {
      this.app.dashboard.render(
        react_1.default.createElement(
          ink_1.Static,
          {items: [{dep}]},
          ({dep}) =>
            react_1.default.createElement(
              ink_1.Text,
              {key: dep},
              dep,
              ' is already installed',
            ),
        ),
      )
    }
    return shouldInstall
  }
  installDev(deps) {
    Object.entries(deps)
      .filter(([dep]) => this.shouldInstall(dep))
      .forEach(([dep, ver]) => {
        this.notify([
          {msg: `Installing dev dependency: ${dep}@${ver}`},
          {
            msg: this.manager.client
              .install(true, `${dep}@${ver}`)
              .output.toString(),
          },
        ])
      })
  }
  install(deps) {
    Object.entries(deps)
      .filter(([dep]) => this.shouldInstall(dep))
      .forEach(([dep, ver]) => {
        this.notify([
          {msg: `Installing dependency: ${dep}@${ver}`},
          {
            msg: this.manager.client
              .install(false, `${dep}@${ver}`)
              .output.toString(),
          },
        ])
      })
  }
  notify(notices) {
    this.app.dashboard.render(
      react_1.default.createElement(
        ink_1.Static,
        {items: notices},
        ({msg}) =>
          react_1.default.createElement(
            ink_1.Text,
            {key: `${msg}`},
            msg,
          ),
      ),
    )
  }
}
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Dependencies.prototype,
  'pkg',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Dependencies.prototype,
  'register',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Dependencies.prototype,
  'shouldInstall',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Dependencies.prototype,
  'installDev',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Dependencies.prototype,
  'install',
  null,
)
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Dependencies.prototype,
  'notify',
  null,
)
exports.Dependencies = Dependencies
//# sourceMappingURL=index.js.map
