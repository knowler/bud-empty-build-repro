import {__decorate} from 'tslib'
import {Container} from '@roots/container'
import {Signale} from 'signale'
import {boundMethod as bind} from 'autobind-decorator'
/**
 * Logger service
 */
export class Logger extends Container {
  constructor(app) {
    super()
    this.name = 'service/logger'
    this.config = {
      displayScope: true,
      displayBadge: false,
      displayDate: false,
      displayFilename: false,
      displayLabel: true,
      displayTimestamp: false,
      underlineLabel: false,
      underlineMessage: false,
      underlinePrefix: false,
      underlineSuffix: false,
      uppercaseLabel: false,
    }
    this.options = {
      disabled: true,
      interactive: false,
      secrets: [process.cwd()],
      stream: process.stdout,
    }
    this._app = app
  }
  get instance() {
    return this._instance
  }
  set instance(instance) {
    this._instance = instance
  }
  get app() {
    return this._app()
  }
  bootstrap() {
    this.instance = this.makeLogger()
    if (process.argv.includes('--log')) {
      this.instance.enable()
    }
  }
  makeLogger() {
    const logger = new Signale(this.options)
    logger.config(this.config)
    logger.scope('framework')
    return logger
  }
}
__decorate([bind], Logger.prototype, 'bootstrap', null)
__decorate([bind], Logger.prototype, 'makeLogger', null)
//# sourceMappingURL=index.js.map
