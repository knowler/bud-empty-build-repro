import {__decorate} from 'tslib'
import {Dependencies as DependenciesManager} from '@roots/dependencies'
import {boundMethod as bind} from 'autobind-decorator'
import {readJsonSync} from 'fs-extra'
import React from 'react'
import {Text, Static} from 'ink'
import {Base} from './Base'
export class Dependencies extends Base {
  pkg() {
    return readJsonSync(this.app.path('project', 'package.json'))
  }
  register() {
    this.manager = new DependenciesManager(
      this.app.path('project'),
    )
  }
  shouldInstall(dep) {
    var _a, _b, _c
    const pkgJson = this.pkg()
    const shouldInstall =
      !pkgJson ||
      !((_c = Object.keys(
        Object.assign(
          Object.assign(
            {},
            (_a = pkgJson['dependencies']) !== null &&
              _a !== void 0
              ? _a
              : {},
          ),
          (_b = pkgJson['devDependencies']) !== null &&
            _b !== void 0
            ? _b
            : {},
        ),
      )) === null || _c === void 0
        ? void 0
        : _c.includes(dep))
    if (!shouldInstall) {
      this.app.dashboard.render(
        React.createElement(Static, {items: [{dep}]}, ({dep}) =>
          React.createElement(
            Text,
            {key: dep},
            dep,
            ' is already installed',
          ),
        ),
      )
    }
    return shouldInstall
  }
  installDev(deps) {
    Object.entries(deps)
      .filter(([dep]) => this.shouldInstall(dep))
      .forEach(([dep, ver]) => {
        this.notify([
          {msg: `Installing dev dependency: ${dep}@${ver}`},
          {
            msg: this.manager.client
              .install(true, `${dep}@${ver}`)
              .output.toString(),
          },
        ])
      })
  }
  install(deps) {
    Object.entries(deps)
      .filter(([dep]) => this.shouldInstall(dep))
      .forEach(([dep, ver]) => {
        this.notify([
          {msg: `Installing dependency: ${dep}@${ver}`},
          {
            msg: this.manager.client
              .install(false, `${dep}@${ver}`)
              .output.toString(),
          },
        ])
      })
  }
  notify(notices) {
    this.app.dashboard.render(
      React.createElement(Static, {items: notices}, ({msg}) =>
        React.createElement(Text, {key: `${msg}`}, msg),
      ),
    )
  }
}
__decorate([bind], Dependencies.prototype, 'pkg', null)
__decorate([bind], Dependencies.prototype, 'register', null)
__decorate([bind], Dependencies.prototype, 'shouldInstall', null)
__decorate([bind], Dependencies.prototype, 'installDev', null)
__decorate([bind], Dependencies.prototype, 'install', null)
__decorate([bind], Dependencies.prototype, 'notify', null)
//# sourceMappingURL=index.js.map
