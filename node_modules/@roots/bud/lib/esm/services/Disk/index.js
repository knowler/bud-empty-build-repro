import {__decorate} from 'tslib'
import {Disk as Base} from '@roots/bud-framework'
import {FileContainer} from '@roots/filesystem'
import {boundMethod as bind} from 'autobind-decorator'
export class Disk extends Base {
  register() {
    this.setStore({
      ['@roots']: {
        baseDir: this.app.path('modules', '@roots'),
        glob: this.pattern,
      },
      project: {
        baseDir: this.app.path('project'),
        glob: this.pattern,
      },
    })
    this.every((name, disk) => {
      this.set(name, this.make(name, disk))
    })
  }
  boot() {
    this.get('project').has('package.json')
      ? this.app.store.set(
          'project',
          this.get('project').readJson('package.json'),
        )
      : this.logger
          .scope("@roots/bud-disk couldn't find a package.json")
          .log(this.get('project'))
  }
  make(
    key,
    options = {
      baseDir: this.baseDir,
      glob: this.pattern,
    },
  ) {
    this.set(key, this.makeFileContainer(options))
    return this.get(key)
  }
  makeFileContainer(options) {
    var _a, _b
    const dir =
      (_a =
        options === null || options === void 0
          ? void 0
          : options.baseDir) !== null && _a !== void 0
        ? _a
        : this.baseDir
    const glob =
      (_b =
        options === null || options === void 0
          ? void 0
          : options.glob) !== null && _b !== void 0
        ? _b
        : this.pattern
    this.logger
      .scope('@roots/bud-disk')
      .log(`Making disk: ${dir}`)
    const container = new FileContainer(dir)
    container.setDisk(glob)
    return container
  }
}
__decorate([bind], Disk.prototype, 'register', null)
__decorate([bind], Disk.prototype, 'boot', null)
__decorate([bind], Disk.prototype, 'make', null)
__decorate([bind], Disk.prototype, 'makeFileContainer', null)
//# sourceMappingURL=index.js.map
