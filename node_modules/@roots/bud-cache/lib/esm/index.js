import {__decorate} from 'tslib'
import {Service} from '@roots/bud-framework'
import crypto from 'crypto'
import {mkdirSync, pathExistsSync, readFileSync} from 'fs-extra'
import {boundMethod as bind} from 'autobind-decorator'
import {sync} from 'globby'
class Cache extends Service {
  constructor() {
    super(...arguments)
    this.name = '@roots/bud-cache'
    this.cacheFiles = []
  }
  register() {
    this.app.hooks
      .on('build/cache/name', () => undefined)
      .hooks.on('build/cache/version', () => undefined)
      .hooks.on('build/cache/type', () => 'memory')
      .hooks.on('build/cache/cacheDirectory', () => undefined)
      .hooks.on('build/cache/cacheLocation', () => undefined)
      .hooks.on('build/cache/buildDependencies', undefined)
      .hooks.on('build/cache/managedPaths', () => undefined)
  }
  booted() {
    this.app.hooks.filter('build/cache/type') === 'filesystem' &&
      !pathExistsSync(this.app.path('storage')) &&
      mkdirSync(this.app.path('storage'))
  }
  version() {
    return crypto
      .createHash('md4')
      .update(this.hash())
      .digest('hex')
  }
  directory() {
    return this.app.path('storage', 'cache')
  }
  buildDependencies() {
    return sync([
      this.app.path(
        'project',
        `${this.app.name}.{js,ts,yml,json}`,
      ),
      this.app.path(
        'project',
        `${this.app.name}.${this.app.mode}.{js,ts.yml,json}`,
      ),
      this.app.path('project', 'package.json'),
      ...this.app.discovery.resolveFrom.map(
        dep => `${dep}/lib/cjs/index.js`,
      ),
      ...this.app.discovery.resolveFrom.map(
        dep => `${dep}/package.json`,
      ),
      ...this.cacheFiles,
      this.app.path('storage', 'cache/*'),
    ])
  }
  hash() {
    var _a
    return JSON.stringify(
      (_a = this.buildDependencies().reduce(
        (all, file) => all.concat(readFileSync(file, 'utf8')),
        process.argv.slice(3).join(''),
      )) !== null && _a !== void 0
        ? _a
        : '{}',
    )
  }
}
__decorate([bind], Cache.prototype, 'register', null)
__decorate([bind], Cache.prototype, 'booted', null)
__decorate([bind], Cache.prototype, 'version', null)
__decorate([bind], Cache.prototype, 'directory', null)
__decorate([bind], Cache.prototype, 'buildDependencies', null)
__decorate([bind], Cache.prototype, 'hash', null)
export {Cache}
//# sourceMappingURL=index.js.map
