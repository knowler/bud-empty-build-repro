'use strict'
Object.defineProperty(exports, '__esModule', {value: true})
exports.Build = void 0
const tslib_1 = require('tslib')
const bud_framework_1 = require('@roots/bud-framework')
const mini_css_extract_plugin_1 = tslib_1.__importDefault(
  require('mini-css-extract-plugin'),
)
const Loader_1 = require('../Loader')
const Rule_1 = require('../Rule')
const Item_1 = require('../Item')
const config_1 = require('./config')
const autobind_decorator_1 = require('autobind-decorator')
const path_1 = require('path')
class Build extends bud_framework_1.Service {
  constructor() {
    super(...arguments)
    this.name = '@roots/bud-build'
    this.loaders = {}
    this.rules = {}
    this.items = {}
  }
  get config() {
    return this.app.hooks.filter('build')
  }
  register() {
    this.app.hooks.on('before', () => this.app)
    this.app.hooks.on('after', () => this.config)
    this.loaders = {
      css: new Loader_1.Loader(require.resolve('css-loader')),
      style: new Loader_1.Loader(
        require.resolve('style-loader'),
      ),
      minicss: new Loader_1.Loader(
        mini_css_extract_plugin_1.default.loader,
      ),
      file: new Loader_1.Loader(require.resolve('file-loader')),
      raw: new Loader_1.Loader(require.resolve('raw-loader')),
      url: new Loader_1.Loader(require.resolve('url-loader')),
      'resolve-url': new Loader_1.Loader(
        require.resolve('resolve-url-loader'),
      ),
    }
    this.items = {
      css: new Item_1.Item({
        loader: ({build}) => build.loaders.css,
        options: ({hooks}) => {
          var _a
          return {
            sourceMap:
              (_a = hooks.filter('build/devtool')) !== null &&
              _a !== void 0
                ? _a
                : false,
            importLoaders: 1,
          }
        },
      }),
      style: new Item_1.Item({
        loader: ({build}) => build.loaders.style,
      }),
      minicss: new Item_1.Item({
        loader: ({build}) => build.loaders.minicss,
        options: app => ({
          publicPath: path_1.posix.normalize(
            path_1.posix.dirname(
              path_1.posix.relative(
                app.path('project'),
                app.path('src'),
              ),
            ),
          ),
        }),
      }),
      ['raw']: new Item_1.Item({
        loader: ({build}) => build.loaders.raw,
      }),
      ['file']: new Item_1.Item({
        loader: ({build}) => build.loaders.file,
        options: ({store}) => ({
          name: `${
            store.isTrue('hash')
              ? store.get('hashFormat')
              : store.get('fileFormat')
          }.[ext]`,
        }),
      }),
      ['asset']: new Item_1.Item({
        loader: ({build}) => build.loaders.file,
        options: ({store}) => ({
          name: `assets/${
            store.isTrue('hash')
              ? store.get('hashFormat')
              : store.get('fileFormat')
          }.[ext]`,
        }),
      }),
      ['resolve-url']: new Item_1.Item({
        loader: ({build}) => build.loaders['resolve-url'],
        options: ({path, hooks}) => {
          var _a
          return {
            root: path('src'),
            sourceMap:
              (_a = hooks.filter('build/devtool')) !== null &&
              _a !== void 0
                ? _a
                : false,
          }
        },
      }),
    }
    this.rules = {
      css: new Rule_1.Rule({
        test: ({store}) => store.get('patterns.css'),
        exclude: ({store}) => store.get('patterns.modules'),
        use: ({isProduction, build}) => [
          isProduction ? build.items.minicss : build.items.style,
          build.items.css,
        ],
      }),
      js: new Rule_1.Rule({
        test: ({store}) => store.get('patterns.js'),
        exclude: ({store}) => store.get('patterns.modules'),
        use: ({build}) => [build.items['raw']],
      }),
      image: new Rule_1.Rule({
        test: ({store}) => store.get('patterns.image'),
        exclude: ({store}) => store.get('patterns.modules'),
        use: ({build}) => [build.items['asset']],
      }),
      font: new Rule_1.Rule({
        test: ({store}) => store.get('patterns.font'),
        exclude: ({store}) => store.get('patterns.modules'),
        use: ({build}) => [build.items['resolve-url']],
      }),
      svg: new Rule_1.Rule({
        test: ({store}) => store.get('patterns.svg'),
        exclude: ({store}) => store.get('patterns.modules'),
        type: 'asset/resource',
      }),
      html: new Rule_1.Rule({
        test: ({store}) => store.get('patterns.html'),
        exclude: ({store}) => store.get('patterns.modules'),
        use: ({build}) => [build.items['raw']],
      }),
    }
    config_1.config.bind(this.app)()
  }
}
tslib_1.__decorate(
  [autobind_decorator_1.boundMethod],
  Build.prototype,
  'register',
  null,
)
exports.Build = Build
//# sourceMappingURL=index.js.map
