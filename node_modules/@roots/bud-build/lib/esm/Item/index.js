import {__decorate} from 'tslib'
import {boundMethod as bind} from 'autobind-decorator'
import {isFunction} from 'lodash'
import {Base} from '../shared/Base'
export class Item extends Base {
  constructor({loader, options}) {
    super()
    this.setLoader(loader)
    options && this.setOptions(options)
  }
  getLoader(app) {
    return this.loader(app)
  }
  setLoader(loader) {
    this.loader = isFunction(loader) ? loader : () => loader
  }
  setOptions(options) {
    this.options = isFunction(options) ? options : () => options
  }
  mergeOptions(options, app) {
    options = Object.assign(
      Object.assign({}, this.options(app)),
      options,
    )
    this.setOptions(app => options)
  }
  make(app) {
    const output = {
      loader: this.loader(app).make(app),
    }
    if (this.options) {
      output.options = this.options(app)
    }
    return output
  }
}
__decorate([bind], Item.prototype, 'getLoader', null)
__decorate([bind], Item.prototype, 'setLoader', null)
__decorate([bind], Item.prototype, 'setOptions', null)
__decorate([bind], Item.prototype, 'mergeOptions', null)
__decorate([bind], Item.prototype, 'make', null)
//# sourceMappingURL=index.js.map
