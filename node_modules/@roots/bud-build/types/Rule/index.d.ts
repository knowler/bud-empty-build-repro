import type { Framework } from '@roots/bud-framework';
import type { Rule as Contract } from './interface';
import type { Item } from '../Item/interface';
declare class Rule implements Contract {
    protected test: Contract.TestFn;
    protected use: Contract.UseFn;
    protected exclude: Contract.ExcludeFn;
    protected type: Contract.TypeFn;
    constructor({ test, use, exclude, type, }: {
        test: RegExp | Contract.TestFn;
        use?: Item[] | Contract.UseFn;
        exclude?: RegExp | Contract.ExcludeFn;
        type?: string | Contract.TypeFn;
    });
    getTest(app: Framework): RegExp;
    setTest(test: RegExp | ((app: Framework) => RegExp)): void;
    getUse(app: Framework): Item[];
    setUse(use: Contract.UseFn | Item[]): void;
    getExclude(app: Framework): RegExp;
    setExclude(exclude: (app: Framework) => RegExp): void;
    getType(app: Framework): string;
    setType(type: any): void;
    make(app: Framework): {
        test: RegExp;
        use?: {
            loader: string;
            options?: {
                [key: string]: any;
            };
        }[];
        exclude?: RegExp;
        type?: string;
    };
}
export { Rule };
//# sourceMappingURL=index.d.ts.map