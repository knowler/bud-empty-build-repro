import type { Framework } from '@roots/bud-framework';
import type { Item } from '../Item/interface';
export { Rule };
declare namespace Rule {
    type TestFn = (app?: Framework) => RegExp;
    type UseFn = (app?: Framework) => Item[];
    type ExcludeFn = (app?: Framework) => RegExp;
    type TypeFn = (app?: Framework) => string;
    interface Output {
        test: RegExp;
        exclude?: RegExp;
        use?: Item.Output[];
        type?: string;
    }
}
interface Rule {
    getTest(app: Framework): RegExp;
    setTest(test: RegExp | Rule.TestFn): void;
    getUse(app: Framework): Item[];
    setUse(use: Rule.UseFn): void;
    getExclude(app: Framework): Rule.Output['exclude'];
    setExclude(exclude: Rule.ExcludeFn | RegExp): void;
    getType(app: Framework): Rule.Output['type'];
    setType(type: string | Rule.TypeFn): void;
    make(app: Framework): Rule.Output;
}
//# sourceMappingURL=interface.d.ts.map