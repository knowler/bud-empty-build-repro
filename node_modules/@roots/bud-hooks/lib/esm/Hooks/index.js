import {__decorate} from 'tslib'
import {Service} from '@roots/bud-framework'
import prettyFormat from 'pretty-format'
import _ from 'lodash'
import {boundMethod as bind} from 'autobind-decorator'
export default class default_1 extends Service {
  constructor() {
    super(...arguments)
    this.name = '@roots/bud-hooks'
  }
  get(path) {
    return _.get(this.repository, path)
  }
  set(key, value) {
    _.set(this.repository, key, value)
    return this
  }
  on(id, callback) {
    const [publisher, name] = _.isArray(id)
      ? id
      : ['anonymous', id]
    const current = this.get(name)
    if (!_.isArray(current)) {
      this.set(name, [callback])
    } else {
      this.set(name, [...current, callback])
    }
    this.logger.scope(name, publisher).success({
      message: `${name} updated`,
    })
    return this.app
  }
  filter(id) {
    const [subscriber, name] = _.isArray(id)
      ? id
      : ['anonymous', id]
    !this.has(name) && this.set(name, [_.noop])
    const result = this.get(name).reduce((v, cb) => {
      return _.isFunction(cb) ? cb(v) : cb
    }, null)
    this.logger.scope(name, subscriber).success({
      message: `${name} retrieved`,
      suffix: prettyFormat(result, {
        highlight: true,
      }),
    })
    return result
  }
  link(target, links) {
    this.on(target, () =>
      links.reduce(
        (a, link) =>
          Object.assign(Object.assign({}, a), {
            [link]: (() => this.filter(`${target}/${link}`))(),
          }),
        {},
      ),
    )
    return this.app
  }
}
__decorate([bind], default_1.prototype, 'get', null)
__decorate([bind], default_1.prototype, 'set', null)
__decorate([bind], default_1.prototype, 'on', null)
__decorate([bind], default_1.prototype, 'filter', null)
__decorate([bind], default_1.prototype, 'link', null)
//# sourceMappingURL=index.js.map
