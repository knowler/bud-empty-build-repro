"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebpackConfigDumpPlugin = void 0;
const webpack_log_1 = __importDefault(require("webpack-log"));
const fs_1 = require("fs");
const util_1 = require("util");
const lodash_1 = require("lodash");
const log = webpack_log_1.default({ name: "wcd" });
class WebpackConfigDumpPlugin {
    constructor(options = {}) {
        this.outputPath = options.outputPath ? options.outputPath : "./";
        this.name = options.name ? options.name : "webpack.config.dump";
        this.depth = options.depth ? options.depth : 4;
        if (this.depth < 0) {
            throw new Error('[wcd] The "depth" option should be a positive number');
        }
        this.keepCircularReferences = options.keepCircularReferences || false;
        this.showFunctionNames = options.showFunctionNames || false;
        this.includeFalseValues = options.includeFalseValues || false;
    }
    static getReferenceLabel(path) {
        return `<<Circular reference to '${path}'>>`;
    }
    static getFunctionLabel(fn) {
        return `<<Function '${fn.name}'>>`;
    }
    static getRef(config, references) {
        return Object.keys(references).find((ref) => references[ref].link === config);
    }
    apply(compiler) {
        this.dumpConfig(compiler.options);
    }
    getDump(config, depth, includeFalseValues, showFunctionNames) {
        return util_1.inspect(this.simplifyConfig(config, depth, includeFalseValues, showFunctionNames), { depth });
    }
    simplifyConfig(config, depth, includeFalseValues, showFunctionNames) {
        return this.simplifyLevel(config, depth, includeFalseValues, showFunctionNames);
    }
    dumpConfig(config) {
        if (!fs_1.existsSync(this.outputPath)) {
            try {
                fs_1.mkdirSync(this.outputPath);
            }
            catch (err) {
                log.warn("Could not create cache folder:", err);
                return;
            }
        }
        const depth = this.keepCircularReferences ? null : this.depth;
        const dump = this.getDump(config, depth, this.includeFalseValues, this.showFunctionNames);
        try {
            fs_1.writeFileSync(`${this.outputPath}/${this.name}`, `module.exports = () => (${dump})`);
        }
        catch (err) {
            log.warn("Could not create dump file:", err);
        }
    }
    simplifyLevel(config, depth, includeFalseValues, showFunctionNames, currentDepth = 0, path = "config", references = {}) {
        const isDepthFinite = typeof depth === "number";
        if (isDepthFinite && currentDepth === depth) {
            return null;
        }
        if (lodash_1.isFunction(config)) {
            const label = WebpackConfigDumpPlugin.getFunctionLabel(config);
            return (showFunctionNames && label) || null;
        }
        if (Array.isArray(config)) {
            const refKey = !isDepthFinite && WebpackConfigDumpPlugin.getRef(config, references);
            if (refKey) {
                const label = WebpackConfigDumpPlugin.getReferenceLabel(refKey);
                return !references[refKey].empty || includeFalseValues ? label : null;
            }
            const newRef = {
                link: config,
                empty: false,
            };
            references[path] = newRef;
            const formattedLevel = config.reduce((res, item, ind) => {
                const value = this.simplifyLevel(item, depth, includeFalseValues, showFunctionNames, currentDepth + 1, `${path}.[${ind}]`, references);
                if (value || includeFalseValues) {
                    res.push(value);
                }
                return res;
            }, []);
            newRef.empty = !formattedLevel.length;
            return formattedLevel.length || includeFalseValues
                ? formattedLevel
                : null;
        }
        if (lodash_1.isRegExp(config)) {
            return config || includeFalseValues ? config : null;
        }
        if (lodash_1.isObject(config)) {
            const refKey = !isDepthFinite && WebpackConfigDumpPlugin.getRef(config, references);
            if (refKey) {
                const label = WebpackConfigDumpPlugin.getReferenceLabel(refKey);
                return !references[refKey].empty || includeFalseValues ? label : null;
            }
            const newRef = {
                link: config,
                empty: false,
            };
            references[path] = newRef;
            const formattedLevel = Object.keys(config).reduce((res, key) => {
                const value = this.simplifyLevel(config[key], depth, includeFalseValues, showFunctionNames, currentDepth + 1, `${path}.${key}`, references);
                if (value || includeFalseValues) {
                    res[key] = value;
                }
                return res;
            }, {});
            newRef.empty = !Object.keys(formattedLevel).length;
            return Object.keys(formattedLevel).length || includeFalseValues
                ? formattedLevel
                : null;
        }
        return config || includeFalseValues ? config : null;
    }
}
exports.WebpackConfigDumpPlugin = WebpackConfigDumpPlugin;
